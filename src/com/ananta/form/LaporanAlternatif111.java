package com.ananta.form;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import com.ananta.database.Database;
import java.text.NumberFormat;
import java.util.Locale;
/**
 *
 * @author M.Khoiril
 */
public class LaporanAlternatif111 extends javax.swing.JPanel {

    private Connection conn;
    
    public LaporanAlternatif111() {
        initComponents();
        conn = Database.getConnection();
        loadData();
            setModelTabelTransaksi();
            getDataTransaksi((DefaultTableModel) Pemasukan.getModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shapecustom2 = new com.ananta.shape.shapecustom();
        whiteBg8 = new com.ananta.shape.shapecustom();
        jScrollPane1 = new javax.swing.JScrollPane();
        Pemasukan = new com.ananta.shape.JTabeel();
        jLabel1 = new javax.swing.JLabel();

        shapecustom2.setBackground(new java.awt.Color(6, 0, 0));
        shapecustom2.setPreferredSize(new java.awt.Dimension(630, 10));
        shapecustom2.setRoundBottomLeft(60);
        shapecustom2.setRoundBottomRight(60);
        shapecustom2.setRoundTopLeft(60);
        shapecustom2.setRoundTopRight(60);

        whiteBg8.setBackground(new java.awt.Color(204, 204, 204));
        whiteBg8.setRoundBottomLeft(80);
        whiteBg8.setRoundBottomRight(80);
        whiteBg8.setRoundTopLeft(80);
        whiteBg8.setRoundTopRight(80);

        Pemasukan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Kd Transaksi", "Waktu", "Tot. Harga", "Bayar", "Kembali", "Keterangan", "Kasir"
            }
        ));
        jScrollPane1.setViewportView(Pemasukan);

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(1, 0, 0));
        jLabel1.setText("Riwayat Transaksi");

        javax.swing.GroupLayout whiteBg8Layout = new javax.swing.GroupLayout(whiteBg8);
        whiteBg8.setLayout(whiteBg8Layout);
        whiteBg8Layout.setHorizontalGroup(
            whiteBg8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, whiteBg8Layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(whiteBg8Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        whiteBg8Layout.setVerticalGroup(
            whiteBg8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whiteBg8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout shapecustom2Layout = new javax.swing.GroupLayout(shapecustom2);
        shapecustom2.setLayout(shapecustom2Layout);
        shapecustom2Layout.setHorizontalGroup(
            shapecustom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapecustom2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(whiteBg8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        shapecustom2Layout.setVerticalGroup(
            shapecustom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapecustom2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(whiteBg8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shapecustom2, javax.swing.GroupLayout.PREFERRED_SIZE, 1232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shapecustom2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(552, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.ananta.shape.JTabeel Pemasukan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.ananta.shape.shapecustom shapecustom2;
    private com.ananta.shape.shapecustom whiteBg8;
    // End of variables declaration//GEN-END:variables

    private int totalPemasukan () {
        int totalPemasukan = 0;
        try {
            String sql = """
                         SELECT IFNULL(SUM(total_harga), 0) AS pemasukan
                         FROM transaksi
                         WHERE DATE(created_at) = CURDATE();""";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            if (rs.next()){
                totalPemasukan = rs.getInt("pemasukan");
            }
            
        }catch (Exception e) {
            e.printStackTrace();
        }
        return totalPemasukan;
    }
    
    private int totalPengeluaran () {
        int totalPengeluaran = 0;
        try {
            String sql = """
                         SELECT IFNULL(SUM(jumlah), 0) AS pengeluaran
                         FROM pengeluaran
                         WHERE DATE(created_at) = CURDATE();""";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            if (rs.next()){
                totalPengeluaran = rs.getInt("pengeluaran");
            }
            
        }catch (Exception e) {
            e.printStackTrace();
        }
        return totalPengeluaran;
    }
    
    private int totalLaba() {
        int totalLaba = 0;
        try {
            String sql = """
                         SELECT
                             IFNULL((
                                 SELECT SUM(total_harga)
                                 FROM transaksi
                                 WHERE DATE(created_at) = CURDATE()
                             ), 0)
                             -
                             IFNULL((
                                 SELECT SUM(jumlah)
                                 FROM pengeluaran
                                 WHERE DATE(created_at) = CURDATE()
                             ), 0) AS laba;
                         """;
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                totalLaba = rs.getInt("laba");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return totalLaba;
    }
    
    private int jmlTransaksi() {
        int jmlTransaksi = 0;
        try {
            String sql = """
                        SELECT COUNT(*) AS jumlah_transaksi
                        FROM transaksi
                        WHERE DATE(created_at) = CURDATE();
                        """;
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                jmlTransaksi = rs.getInt("jumlah_transaksi");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return jmlTransaksi;
    }

    
    private int jmlJasaDikerjakan() {
        int jmlJasa = 0;
        try {
            String sql = """
                        SELECT COUNT(*) AS jumlah_jasa_dikerjakan
                        FROM transaksi_jasa tj
                        JOIN transaksi t ON tj.id_transaksi = t.id_transaksi
                        WHERE DATE(t.created_at) = CURDATE();
                        """;
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                jmlJasa = rs.getInt("jumlah_jasa_dikerjakan");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return jmlJasa;
    }
    
    private int jmlProdukTerjual() {
        int jmlProduk = 0;
        try {
            String sql = """
                         SELECT COUNT(*) AS jumlah_produk
                         FROM transaksi_barang tb
                         JOIN transaksi t ON tb.id_transaksi = t.id_transaksi
                         WHERE DATE(t.created_at) = CURDATE();
                         """;
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                jmlProduk = rs.getInt("jumlah_produk");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return jmlProduk;
    }

    private void getTerlaris() {
        String namaTerlaris = "-";
        int jumlahTerlaris = 0;

        try {
            String sqlJasa = """
                             SELECT j.nama_jasa AS nama, COUNT(*) AS jumlah
                             FROM transaksi_jasa tj
                             JOIN transaksi t ON tj.id_transaksi = t.id_transaksi
                             JOIN jasa j ON tj.id_jasa = j.id_jasa
                             WHERE DATE(t.created_at) = CURDATE()
                             GROUP BY j.nama_jasa
                             ORDER BY jumlah DESC
                             LIMIT 1;
                             """;
            
           PreparedStatement stJasa = conn.prepareStatement(sqlJasa);
            ResultSet rsJasa = stJasa.executeQuery();

            String namaJasa = null;
            int jumlahJasa = 0;
        
            if (rsJasa.next()) {
                namaJasa = rsJasa.getString("nama");
                jumlahJasa = rsJasa.getInt("jumlah");
            }

            String sqlProduk = """
                               SELECT b.nama_barang AS nama, COUNT(*) AS jumlah
                               FROM transaksi_barang tb
                               JOIN transaksi t ON tb.id_transaksi = t.id_transaksi
                               JOIN barang b ON tb.id_barang = b.id_barang
                               WHERE DATE(t.created_at) = CURDATE()
                               GROUP BY b.nama_barang
                               ORDER BY jumlah DESC
                               LIMIT 1;
                               """;

            PreparedStatement stProduk = conn.prepareStatement(sqlProduk);
            ResultSet rsProduk = stProduk.executeQuery();

            String namaProduk = null;
            int jumlahProduk = 0;

            if (rsProduk.next()) {
                namaProduk = rsProduk.getString("nama");
                jumlahProduk = rsProduk.getInt("jumlah");
            }

            if (jumlahJasa >= jumlahProduk) {
                namaTerlaris = namaJasa != null ? namaJasa : "-";
                jumlahTerlaris = jumlahJasa;
            } else {
                namaTerlaris = namaProduk != null ? namaProduk : "-";
                jumlahTerlaris = jumlahProduk;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        //txtTerlaris.setText(namaTerlaris);
        //numTerlaris.setText("("+jumlahTerlaris + "x)");
    }

    
    private void loadData() {
    NumberFormat formatRupiah = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("id-ID"));
        
//      PemasukanDlmAngka.setText(formatRupiah.format(totalPemasukan()));
//      PengeluaranDlmAngka.setText(formatRupiah.format(totalPengeluaran()));
//      LabaDlmAngka.setText(formatRupiah.format(totalLaba()));
//      TransaksiDlmAngka.setText(String.valueOf(jmlTransaksi()));
//      JasaDlmAngka.setText(String.valueOf(jmlJasaDikerjakan()));
//      ProdukDlmAngka.setText(String.valueOf(jmlProdukTerjual()));
//      getTerlaris();
    }

    private void setModelTabelTransaksi() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID TRANSAKSI");
        model.addColumn("WAKTU");
        model.addColumn("JENIS TRANSAKSI");
        model.addColumn("NOMINAL");
        model.addColumn("KETERANGAN");
        Pemasukan.setModel(model);
}
    
    
    private void getDataTransaksi(DefaultTableModel model) {
        model.setRowCount(0);
            
        try {
            String sql = """
                SELECT t.id_transaksi, t.created_at, 'Pemasukan' AS jenis, t.total_harga AS nominal,
                           CONCAT_WS(', ',
                               (SELECT j.nama_jasa
                                FROM transaksi_jasa tj
                                JOIN jasa j ON tj.id_jasa = j.id_jasa
                                WHERE tj.id_transaksi = t.id_transaksi
                                LIMIT 1),
                               (SELECT b.nama_barang
                                FROM transaksi_barang tb
                                JOIN barang b ON tb.id_barang = b.id_barang
                                WHERE tb.id_transaksi = t.id_transaksi
                                LIMIT 1)
                           ) AS keterangan
                    FROM transaksi t
                    WHERE DATE(t.created_at) = CURDATE()
                    
                    UNION ALL
                    
                    SELECT p.id_pengeluaran, p.created_at, 'Pengeluaran' AS jenis, p.jumlah AS nominal, p.kategori AS keterangan
                    FROM pengeluaran p
                    WHERE DATE(p.created_at) = CURDATE()
                    
                    ORDER BY created_at ASC;
                """;
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

        NumberFormat formatRupiah = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("id-ID"));
            int no = 1;
            while (rs.next()) {
                Object[] rowData = {
                    no++,
                    rs.getString("created_at"),
                    rs.getString("jenis"),
                    formatRupiah.format(rs.getInt("nominal")),
                    rs.getString("keterangan")
                };
                model.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
