
package com.ananta.form;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.util.UIScale;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import com.pengaturan.otp.filterDT;
import com.pengaturan.otp.getEmail;
import com.pengaturan.otp.getEmail.sessionData;
import com.pengaturan.otp.otpGenerate;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager;
import javax.swing.JButton;
import javax.swing.JPanel;
/**
 *
 * @author choos
 */
public class FormOtpVal extends javax.swing.JPanel {
    private CardLayout cardLayout;
    private JPanel parent;
      
    public FormOtpVal(CardLayout layout, JPanel parentPanel) {
        initComponents();
        setLayoutForm();
        
        this.cardLayout = layout;
        this.parent = parentPanel;    
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelOTP = new javax.swing.JPanel();
        KodePanel = new javax.swing.JTextField();
        LabelOTP = new javax.swing.JLabel();
        KodeLabel = new javax.swing.JLabel();
        KonfirmasiButton = new javax.swing.JButton();
        KimulButton = new javax.swing.JButton();
        LabelIcon = new javax.swing.JLabel();

        PanelOTP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        PanelOTP.add(KodePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 307, 312, 40));

        LabelOTP.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        LabelOTP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelOTP.setText("Konfirmasi OTP");
        PanelOTP.add(LabelOTP, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 202, -1, -1));

        KodeLabel.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        KodeLabel.setText("Masukkan Kode");
        PanelOTP.add(KodeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 283, -1, -1));

        KonfirmasiButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        KonfirmasiButton.setText("Konfirmasi");
        KonfirmasiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KonfirmasiButtonActionPerformed(evt);
            }
        });
        PanelOTP.add(KonfirmasiButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 403, 312, 40));

        KimulButton.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        KimulButton.setText("Kirim Ulang");
        KimulButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KimulButtonActionPerformed(evt);
            }
        });
        PanelOTP.add(KimulButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 353, -1, -1));

        LabelIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\choos\\Downloads\\AnantaB\\AnantaB\\build\\classes\\com\\ananta\\icon\\Logo_Ananta.png")); // NOI18N
        PanelOTP.add(LabelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 19, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelOTP, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelOTP, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void KonfirmasiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KonfirmasiButtonActionPerformed
    String otpText = KodePanel.getText().trim();

    if (otpText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan kode anda!");
        return;
    }

    try {
        int inputOtp = Integer.parseInt(otpText);

        if (inputOtp == otpGenerate.getOTP()) {
            JOptionPane.showMessageDialog(this, "Kode OTP cocok!");
            cardLayout.show(parent, "ubah");
         
        } else {
            JOptionPane.showMessageDialog(this, "Kode OTP salah!");
            System.out.println("OTP tidak cocok!");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Kode OTP harus berupa angka!");
    }    
    }//GEN-LAST:event_KonfirmasiButtonActionPerformed

    private void KimulButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KimulButtonActionPerformed
    String emailTujuan = sessionData.emailData;
    getEmail.emailResend(emailTujuan);
    JOptionPane.showMessageDialog(this, "Kode OTP telah dikirim ulang ke: " + emailTujuan);

    }//GEN-LAST:event_KimulButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton KimulButton;
    private javax.swing.JLabel KodeLabel;
    private javax.swing.JTextField KodePanel;
    private javax.swing.JButton KonfirmasiButton;
    private javax.swing.JLabel LabelIcon;
    private javax.swing.JLabel LabelOTP;
    private javax.swing.JPanel PanelOTP;
    // End of variables declaration//GEN-END:variables
        
    private void setLayoutForm() {
        setLayout(new FormOtpLayout());
        PanelOTP.setLayout(new OtpLayout());

        // Gaya PanelLogin
        PanelOTP.putClientProperty(FlatClientProperties.STYLE, ""
                + "background:$Login.background;"
                + "arc:30;"
                + "border:20,20,40,20");

        KodePanel.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:10;");

        // Gaya untuk ButtonLogin
        KonfirmasiButton.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:10;"
                + "borderWidth:0;"
                + "focusWidth:0;");

        // ✅ Atur tinggi TextUsername dan TextPassword
        Dimension fieldSize = new Dimension(0, 40); // 0 = biar layout tetap pakai full lebar
        KodePanel.setPreferredSize(fieldSize);

        // ✅ Atur tinggi dan lebar ButtonLogin
        KonfirmasiButton.setPreferredSize(new Dimension(120, 40));
    }
        private class FormOtpLayout implements LayoutManager {

        @Override
        public void addLayoutComponent(String name, Component comp) {

        }

        @Override
        public void removeLayoutComponent(Component comp) {

        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                return new Dimension(0, 0);
                
            }
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                return new Dimension(0, 0);
            }
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                int width = parent.getWidth();
                int height = parent.getHeight();
                int loginWidth = UIScale.scale(300);
                int loginHeight = PanelOTP.getPreferredSize().height;
                int x = (width - loginWidth) / 2;
                int y = (height - loginHeight) / 2;
                PanelOTP.setBounds(x, y, loginWidth, loginHeight);
            }
        }

    }
        private class OtpLayout implements LayoutManager {

        private final int titleGap = 20;
        private final int textGap = 10;
        private final int labelGap = 10;
        private final int buttonGap = 30;

        @Override
        public void addLayoutComponent(String name, Component comp) {

        }

        @Override
        public void removeLayoutComponent(Component comp) {

        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets insets = parent.getInsets();
               
                int height = insets.top + insets.bottom;

                height += LabelIcon.getPreferredSize().height;
                height += UIScale.scale(titleGap);
                height += LabelOTP.getPreferredSize().height;
                height += UIScale.scale(titleGap);

                height += KodeLabel.getPreferredSize().height;
                height += UIScale.scale(titleGap);
                height += KodePanel.getPreferredSize().height;
                height += UIScale.scale(textGap);

                height += KimulButton.getPreferredSize().height;
                height += UIScale.scale(buttonGap);

                height += KonfirmasiButton.getPreferredSize().height;
                height += UIScale.scale(textGap);

                return new Dimension(0, height);
            }
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                return new Dimension(0, 0);
            }
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets insets = parent.getInsets();
                int x = insets.left;
                int y = insets.top;
                int width = parent.getWidth() - (insets.left + insets.right);

                LabelIcon.setBounds(x, y, width, LabelIcon.getPreferredSize().height);
                y += LabelIcon.getPreferredSize().height + UIScale.scale(titleGap);

                LabelOTP.setBounds(x, y, width, LabelOTP.getPreferredSize().height);
                y += LabelOTP.getPreferredSize().height + UIScale.scale(titleGap);

                KodeLabel.setBounds(x, y, width, KodeLabel.getPreferredSize().height);
                y += KodeLabel.getPreferredSize().height + UIScale.scale(labelGap);
                KodePanel.setBounds(x, y, width, KodePanel.getPreferredSize().height);
                y += KodePanel.getPreferredSize().height + UIScale.scale(textGap);

                int buttonWidth = KonfirmasiButton.getPreferredSize().width;
                int buttonX = x + (width - buttonWidth) / 2;
                KonfirmasiButton.setBounds(buttonX, y, buttonWidth, KonfirmasiButton.getPreferredSize().height);

                // Tombol "Lupa Password"
           // Tentukan ukuran dan posisi manual untuk LupaButton
                int KimulButtonWidth = 150;
                int KimulButtonHeight = 30;
                int KimulButtonX = x + -2;  // dari kiri
                int KimulButtonY = y + -10;       // negatif ke atas, plus kebawah
                KimulButton.setBounds(KimulButtonX, KimulButtonY, KimulButtonWidth, KimulButtonHeight);
                y += KimulButtonHeight + UIScale.scale(buttonGap);             
                
                // Login Button (posisi dan ukuran manual)
                int KonfirmasiButtonWidth = 320;
                int KonfirmasiButtonHeight = 40;
                int KonfirmasiButtonX = x + (width - KonfirmasiButtonWidth) / 2;
                KonfirmasiButton.setBounds(KonfirmasiButtonX, y, KonfirmasiButtonWidth, KonfirmasiButtonHeight);
                y += KonfirmasiButtonHeight + UIScale.scale(textGap);
                

            }
        }
    }
}
